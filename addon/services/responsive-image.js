import ResponsiveImageService from 'ember-responsive-image/services/responsive-image';
import { assert } from '@ember/debug';

/**
 * Service class to provides images generated by the responsive images package
 * with additional inline support
 *
 * @class ResponsiveImageService
 * @namespace Services
 * @module responsive-image
 * @public
 */
export default ResponsiveImageService.extend({

  /**
   * returns the inline image data as base64 encoded string
   *
   * @method getInlineImage
   * @param {String} imageName The origin name of the Image
   * @returns {String} the base64 encoded string
   * @public
   */
  getInlineImage(imageName) {
    assert(`There is no data for image ${imageName}`, this.get('meta').hasOwnProperty(imageName));
    assert(`There is no inline data for image ${imageName}`, this.get('meta')[imageName].hasOwnProperty('lqip'));
    assert(`There is no inline image data for image ${imageName}`, this.get('meta')[imageName].lqip.hasOwnProperty('image'));
    return this.get('meta')[imageName].lqip.image;
  },

  /**
   * returns whether there's an inline image for given image name
   *
   * @method hasInlineImage
   * @param {String} imageName The origin name of the Image
   * @returns bool true if there's an inline image
   * @public
   */
  hasInlineImage(imageName) {
    let meta = this.get('meta');
    return meta[imageName] && meta[imageName].lqip && meta[imageName].lqip.image;
  },

  /**
   * returns whether this image has LQIP
   *
   * @method hasLqip
   * @param {String} imageName The origin name of the Image
   * @returns bool true if LQIP is enabled for this image
   * @public
   */
  hasLqip(imageName) {
    let meta = this.get('meta');
    return meta[imageName] && meta[imageName].lqip;
  },

  /**
   * returns whether LQIP is enabled for this image
   *
   * @method isLqipEnabled
   * @param {String} imageName The origin name of the Image
   * @returns bool true if LQIP is enabled for this image
   * @public
   */
  getLqipWidth(imageName) {
    assert(`There is no data for image ${imageName}`, this.get('meta').hasOwnProperty(imageName));
    assert(`There is no inline data for image ${imageName}`, this.get('meta')[imageName].hasOwnProperty('lqip'));
    assert(`There is no inline image data for image ${imageName}`, this.get('meta')[imageName].lqip.hasOwnProperty('width'));
    return this.get('meta')[imageName].lqip.width;
  }
});